goal: sum Nat.zero = Nat.zero * (Nat.zero + 1) / 2

query:
(define-sort Nat () Int)
(define-fun Nat.sub ((x Nat) (y Nat)) Nat (ite (< x y) 0 (- x y)))
(assert (forall ((_uniq.9498 Nat)) (=> (>= _uniq.9498 0) (forall ((_uniq.9499 Nat)) (=> (>= _uniq.9499 0) (>= (Nat.sub _uniq.9498 _uniq.9499) 0))))))
(define-fun-rec sum ((n Nat)) Nat (ite (= n 0) 0 (+ n (sum (Nat.sub n 1)))))
(assert (forall ((_uniq.9500 Nat)) (=> (>= _uniq.9500 0) (>= (sum _uniq.9500) 0))))
(assert (not (= (sum 0) (div (* 0 (+ 0 1)) 2))))
(check-sat)

result: unsat
failed to reconstruct proof: argument type is not the type of the function's argument type:
argument:  (fun (x : Int) => (fun (y : Int) => (ite (binrel% LT.lt x y) 0 (binrel% HSub.hSub x y))))
has type:  Int
not type: (-> Int Int Int)
in term : (Eq Nat.sub (fun (x : Int) => (fun (y : Int) => (ite (binrel% LT.lt x y) 0 (binrel% HSub.hSub x y)))))
goal: sum (Nat.succ n) = Nat.succ n * (Nat.succ n + 1) / 2

query:
(define-sort Nat () Int)
(define-fun Nat.sub ((x Nat) (y Nat)) Nat (ite (< x y) 0 (- x y)))
(assert (forall ((_uniq.9514 Nat)) (=> (>= _uniq.9514 0) (forall ((_uniq.9515 Nat)) (=> (>= _uniq.9515 0) (>= (Nat.sub _uniq.9514 _uniq.9515) 0))))))
(define-fun-rec sum ((n Nat)) Nat (ite (= n 0) 0 (+ n (sum (Nat.sub n 1)))))
(assert (forall ((_uniq.9516 Nat)) (=> (>= _uniq.9516 0) (>= (sum _uniq.9516) 0))))
(declare-const n Nat)
(assert (>= n 0))
(assert (= (sum n) (div (* n (+ n 1)) 2)))
(assert (not (= (sum (+ n 1)) (div (* (+ n 1) (+ (+ n 1) 1)) 2))))
(check-sat)

result: unsat
failed to reconstruct proof: argument type is not the type of the function's argument type:
argument:  (fun (x : Int) => (fun (y : Int) => (ite (binrel% LT.lt x y) 0 (binrel% HSub.hSub x y))))
has type:  Int
not type: (-> Int Int Int)
in term : (Eq Nat.sub (fun (x : Int) => (fun (y : Int) => (ite (binrel% LT.lt x y) 0 (binrel% HSub.hSub x y)))))
Test/Nat/Sum'.lean:5:8: warning: declaration uses 'sorry'
