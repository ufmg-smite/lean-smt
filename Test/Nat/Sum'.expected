goal: sum Nat.zero = Nat.zero * (Nat.zero + 1) / 2

query:
(define-sort Nat () Int)
(define-fun Nat.sub ((x Nat) (y Nat)) Nat (ite (< x y) 0 (- x y)))
(assert (forall ((_uniq.5240 Nat)) (=> (>= _uniq.5240 0) (forall ((_uniq.5241 Nat)) (=> (>= _uniq.5241 0) (>= (Nat.sub _uniq.5240 _uniq.5241) 0))))))
(define-fun-rec sum ((n Nat)) Nat (ite (= n 0) 0 (+ n (sum (Nat.sub n 1)))))
(assert (forall ((_uniq.5242 Nat)) (=> (>= _uniq.5242 0) (>= (sum _uniq.5242) 0))))
(assert (not (= (sum 0) (div (* 0 (+ 0 1)) 2))))
(check-sat)

result: unsat
goal: sum (Nat.succ n) = Nat.succ n * (Nat.succ n + 1) / 2

query:
(define-sort Nat () Int)
(declare-const n Nat)
(assert (>= n 0))
(define-fun Nat.sub ((x Nat) (y Nat)) Nat (ite (< x y) 0 (- x y)))
(assert (forall ((_uniq.5255 Nat)) (=> (>= _uniq.5255 0) (forall ((_uniq.5256 Nat)) (=> (>= _uniq.5256 0) (>= (Nat.sub _uniq.5255 _uniq.5256) 0))))))
(define-fun-rec sum ((n Nat)) Nat (ite (= n 0) 0 (+ n (sum (Nat.sub n 1)))))
(assert (forall ((_uniq.5257 Nat)) (=> (>= _uniq.5257 0) (>= (sum _uniq.5257) 0))))
(assert (not (= (sum (+ n 1)) (div (* (+ n 1) (+ (+ n 1) 1)) 2))))
(assert (= (sum n) (div (* n (+ n 1)) 2)))
(check-sat)

result: unsat
Test/Nat/Sum'.lean:5:8: warning: declaration uses 'sorry'
