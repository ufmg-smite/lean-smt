goal: x ++ y = BitVec.zeroExtend 2 x <<< 2 ||| BitVec.zeroExtend 2 y

query:
(declare-const x (_ BitVec 2))
(declare-const y (_ BitVec 2))
(assert (not (= (concat x y) (bvor (bvshl ((_ zero_extend 2) x) #b0010) ((_ zero_extend 2) y)))))
(check-sat)

result: unsat
failed to reconstruct proof: could not parse solver output: incomplete input: expected a token, got none
solver stdout:

solver stderr:
Fatal failure within cvc5::internal::Node cvc5::internal::proof::LeanNodeConverter::convert(cvc5::internal::Node) at /home/hbarbosa/cvc/wt-leanPrinter/src/proof/lean/lean_node_converter.cpp:549
Unreachable code reached Kind concat is not supported

Test/BitVec/Shift.lean:4:8: warning: declaration uses 'sorry'
goal: x ++ y = BitVec.zeroExtend 3 x <<< 3 ||| BitVec.zeroExtend 3 y

query:
(declare-const x (_ BitVec 3))
(declare-const y (_ BitVec 3))
(assert (not (= (concat x y) (bvor (bvshl ((_ zero_extend 3) x) #b000011) ((_ zero_extend 3) y)))))
(check-sat)

result: unsat
failed to reconstruct proof: could not parse solver output: incomplete input: expected a token, got none
solver stdout:

solver stderr:
Fatal failure within cvc5::internal::Node cvc5::internal::proof::LeanNodeConverter::convert(cvc5::internal::Node) at /home/hbarbosa/cvc/wt-leanPrinter/src/proof/lean/lean_node_converter.cpp:549
Unreachable code reached Kind concat is not supported

Test/BitVec/Shift.lean:9:8: warning: declaration uses 'sorry'
