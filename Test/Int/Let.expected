goal: let y := 10;
f y = 10

query:
(declare-fun f (Int) Int)
(assert (= (f 10) 10))
(assert (not (let ((y 10)) (= (f y) 10))))
(check-sat)

result: unsat
goal: f 10 = 10

query:
(declare-fun f (Int) Int)
(assert (let ((y 10)) (= (f y) 10)))
(assert (not (= (f 10) 10)))
(check-sat)

result: unsat
goal: f z = z

query:
(define-fun z () Int 10)
(declare-fun f (Int) Int)
(assert (= (f 10) 10))
(assert (not (= (f z) z)))
(check-sat)

result: unsat
failed to reconstruct proof: invalid 'simp', proposition expected
  ℤ
goal: f y = y

query:
(define-fun z () Int 10)
(define-fun y () Int z)
(declare-fun f (Int) Int)
(assert (= (f 10) 10))
(assert (not (= (f y) y)))
(check-sat)

result: unsat
failed to reconstruct proof: invalid 'simp', proposition expected
  ℤ
goal: z 3 = 10

query:
(declare-fun f (Int) Int)
(define-fun z ((x._@.Test.Int.Let._hyg.283 Int)) Int (f 10))
(assert (= (f 10) 10))
(assert (not (= (z 3) 10)))
(check-sat)

result: unsat
failed to reconstruct proof: could not parse solver output: incomplete input: expected a token, got none
solver stdout:

solver stderr:
Fatal failure within virtual bool cvc5::internal::proof::LeanProofPostprocessCallback::update(cvc5::internal::Node, cvc5::internal::PfRule, const std::vector<cvc5::internal::NodeTemplate<true> >&, const std::vector<cvc5::internal::NodeTemplate<true> >&, cvc5::internal::CDProof*, bool&) at /home/hbarbosa/cvc/wt-leanPrinter/src/proof/lean/lean_post_processor.cpp:785
Unreachable code reached Higher-order congruence not supported yet

