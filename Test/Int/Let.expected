goal: let y := 10;
f y = 10

query:
(declare-fun f (Int) Int)
(assert (not (let ((y 10)) (= (f y) 10))))
(assert (= (f 10) 10))
(check-sat)

result: unsat
goal: f 10 = 10

query:
(declare-fun f (Int) Int)
(assert (not (= (f 10) 10)))
(assert (let ((y 10)) (= (f y) 10)))
(check-sat)

result: unsat
goal: f z = z

query:
(declare-fun f (Int) Int)
(define-fun z () Int 10)
(assert (not (= (f z) z)))
(assert (= (f 10) 10))
(check-sat)

result: unsat
