goal: curryAdd a b = curryAdd b a

query:
(define-fun curryAdd ((a._@.Test.Int.Binders._hyg.3 Int) (a._@.Test.Int.Binders._hyg.5 Int)) Int (+ a._@.Test.Int.Binders._hyg.3 a._@.Test.Int.Binders._hyg.5))
(declare-const a Int)
(declare-const b Int)
(assert (distinct (curryAdd a b) (curryAdd b a)))
(check-sat)
Test/Int/Binders.lean:5:0: warning: declaration uses 'sorry'
goal: partCurryAdd a b = partCurryAdd b a

query:
(define-fun partCurryAdd ((a Int) (a._@.Test.Int.Binders._hyg.33 Int)) Int (+ a a._@.Test.Int.Binders._hyg.33))
(declare-const a Int)
(declare-const b Int)
(assert (distinct (partCurryAdd a b) (partCurryAdd b a)))
(check-sat)
Test/Int/Binders.lean:11:0: warning: declaration uses 'sorry'
goal: partCurryAdd' a b = partCurryAdd' b a

query:
(define-fun |partCurryAdd'| ((a Int) (a._@.Init.Prelude._hyg.2347 Int)) Int (+ a a._@.Init.Prelude._hyg.2347))
(declare-const a Int)
(declare-const b Int)
(assert (distinct (+ a b) (+ b a)))
(check-sat)
Test/Int/Binders.lean:15:0: warning: declaration uses 'sorry'
goal: mismatchNamesAdd a b = mismatchNamesAdd b a

query:
(define-fun mismatchNamesAdd ((a Int) (b Int)) Int (+ a b))
(declare-const a Int)
(declare-const b Int)
(assert (distinct (mismatchNamesAdd a b) (mismatchNamesAdd b a)))
(check-sat)
Test/Int/Binders.lean:25:0: warning: declaration uses 'sorry'
