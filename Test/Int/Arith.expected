Test/Int/Arith.lean:3:47: error: unsolved goals
n m : Int
h : 0 < m
⊢ 0 < m →
    ¬n % m < m →
      ¬(m + -1 * if m = 0 then (fun x => x % 0) n else n % m) ≥ 1 →
        n = (if m = 0 then (fun x => x % 0) n else n % m) + m * (n / m) →
          m + -1 * n + m * (n / m) ≥ 1 → n % m = if m = 0 then (fun x => x % 0) n else n % m

n m : Int
h : 0 < m
⊢ 0 < m →
    ¬n % m < m →
      n = (if m = 0 then (fun x => x % 0) n else n % m) + m * (n / m) →
        ¬(m + -1 * if m = 0 then (fun x => x % 0) n else n % m) ≥ 1 →
          m + -1 * n + m * (n / m) ≥ 1 →
            m + -1 * n + m * (n / m) ≥ 1 → n % m = if m = 0 then (fun x => x % 0) n else n % m

n m : Int
h : 0 < m
⊢ 0 < m → ¬n % m < m → n % m = n - m * (n / m)

n m : Int
h : 0 < m
⊢ 0 < m →
    ¬n % m < m → (m > 0 → m * (n / m) ≤ n ∧ n < m * (n / m + 1)) ∧ (m < 0 → m * (n / m) ≤ n ∧ n < m * (n / m + -1))

n m : Int
h : 0 < m
⊢ 0 < m → ¬n % m < m → n % m = if m = 0 then (fun x => x % 0) n else n % m
Test/Int/Arith.lean:3:0: error: application type mismatch
  Smt.Reconstruct.Int.PolyNorm.Expr.denote_eq_from_toPolynomial_eq
    (Eq.refl
      ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).sub
            ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).add
              ((Smt.Reconstruct.Int.PolyNorm.Expr.val 1).neg.mul
                ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul
                  (Smt.Reconstruct.Int.PolyNorm.Expr.var 3)))))).toPolynomial)
argument has type
  ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
        ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).sub
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).add
            ((Smt.Reconstruct.Int.PolyNorm.Expr.val 1).neg.mul
              ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul
                (Smt.Reconstruct.Int.PolyNorm.Expr.var 3)))))).toPolynomial =
    ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
        ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).sub
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).add
            ((Smt.Reconstruct.Int.PolyNorm.Expr.val 1).neg.mul
              ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul (Smt.Reconstruct.Int.PolyNorm.Expr.var 3)))))).toPolynomial
but function has type
  ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).sub
            ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).add
              ((Smt.Reconstruct.Int.PolyNorm.Expr.val 1).neg.mul
                ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul
                  (Smt.Reconstruct.Int.PolyNorm.Expr.var 3)))))).toPolynomial =
      ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).sub
            ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).add
              ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul
                (Smt.Reconstruct.Int.PolyNorm.Expr.var 3))))).toPolynomial →
    Smt.Reconstruct.Int.PolyNorm.Expr.denote
        (fun v =>
          if h : v < ((((#[].push (if m = 0 then (fun x => x % 0) n else n % m)).push n).push m).push (n / m)).size then
            ((((#[].push (if m = 0 then (fun x => x % 0) n else n % m)).push n).push m).push (n / m))[v]
          else 0)
        ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).sub
            ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).add
              ((Smt.Reconstruct.Int.PolyNorm.Expr.val 1).neg.mul
                ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul (Smt.Reconstruct.Int.PolyNorm.Expr.var 3)))))) =
      Smt.Reconstruct.Int.PolyNorm.Expr.denote
        (fun v =>
          if h : v < ((((#[].push (if m = 0 then (fun x => x % 0) n else n % m)).push n).push m).push (n / m)).size then
            ((((#[].push (if m = 0 then (fun x => x % 0) n else n % m)).push n).push m).push (n / m))[v]
          else 0)
        ((Smt.Reconstruct.Int.PolyNorm.Expr.val (OfNat.ofNat 1)).mul
          ((Smt.Reconstruct.Int.PolyNorm.Expr.var 1).sub
            ((Smt.Reconstruct.Int.PolyNorm.Expr.var 0).add
              ((Smt.Reconstruct.Int.PolyNorm.Expr.var 2).mul (Smt.Reconstruct.Int.PolyNorm.Expr.var 3)))))
